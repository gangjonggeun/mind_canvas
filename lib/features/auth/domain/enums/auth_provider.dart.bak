/// 🔐 인증 제공자 enum
/// 
/// 앱에서 지원하는 로그인 방식들을 정의
/// - 메모리 효율적인 enum 사용
/// - 확장 가능한 구조 설계
/// - 타입 안전한 인증 방식 관리
enum AuthProvider {
  /// 📧 이메일 로그인
  email('email', '이메일'),
  
  /// 🌐 Google 로그인
  google('google', 'Google'),
  
  /// 🍎 Apple 로그인
  apple('apple', 'Apple'),
  
  /// 👥 게스트 로그인
  guest('guest', '게스트'),
  
  /// 🔍 익명 로그인
  anonymous('anonymous', '익명');

  const AuthProvider(this.value, this.displayName);

  /// API에서 사용하는 문자열 값
  final String value;
  
  /// 사용자에게 표시되는 이름
  final String displayName;

  /// API 값으로부터 AuthProvider 생성
  static AuthProvider? fromValue(String value) {
    for (final provider in AuthProvider.values) {
      if (provider.value == value) {
        return provider;
      }
    }
    return null;
  }

  /// 소셜 로그인 여부 확인
  bool get isSocial => [google, apple].contains(this);
  
  /// 익명 로그인 여부 확인
  bool get isAnonymous => [guest, anonymous].contains(this);
  
  /// 이메일 로그인 여부 확인
  bool get isEmail => this == email;

  /// 프로바이더별 아이콘 코드 반환
  int get iconCode {
    switch (this) {
      case email:
        return 0xe0be; // Icons.email
      case google:
        return 0xe1a0; // Icons.g_mobiledata
      case apple:
        return 0xe318; // Icons.apple
      case guest:
        return 0xe7fd; // Icons.person
      case anonymous:
        return 0xe8f4; // Icons.visibility_off
    }
  }

  /// 프로바이더별 색상 코드 반환 (Hex)
  String get colorHex {
    switch (this) {
      case email:
        return '#6B73FF'; // 메인 브랜드 색상
      case google:
        return '#4285F4'; // Google 브랜드 색상
      case apple:
        return '#000000'; // Apple 브랜드 색상
      case guest:
        return '#64748B'; // 중성 회색
      case anonymous:
        return '#94A3B8'; // 연한 회색
    }
  }

  @override
  String toString() => displayName;
}

/// AuthProvider 확장 메서드
extension AuthProviderExtension on AuthProvider {
  /// 로그인 버튼용 텍스트 반환
  String get buttonText {
    switch (this) {
      case AuthProvider.email:
        return '이메일로 로그인';
      case AuthProvider.google:
        return 'Google로 로그인';
      case AuthProvider.apple:
        return 'Apple로 로그인';
      case AuthProvider.guest:
        return '다른 계정으로 로그인';
      case AuthProvider.anonymous:
        return '익명으로 로그인';
    }
  }

  /// 로딩 중 메시지 반환
  String get loadingMessage {
    switch (this) {
      case AuthProvider.email:
        return '이메일 로그인 중...';
      case AuthProvider.google:
        return 'Google 로그인 중...';
      case AuthProvider.apple:
        return 'Apple 로그인 중...';
      case AuthProvider.guest:
        return '게스트 로그인 중...';
      case AuthProvider.anonymous:
        return '익명 로그인 중...';
    }
  }

  /// 성공 메시지 반환
  String get successMessage {
    switch (this) {
      case AuthProvider.email:
        return '이메일 로그인에 성공했습니다!';
      case AuthProvider.google:
        return 'Google 로그인에 성공했습니다!';
      case AuthProvider.apple:
        return 'Apple 로그인에 성공했습니다!';
      case AuthProvider.guest:
        return '게스트 로그인에 성공했습니다!';
      case AuthProvider.anonymous:
        return '익명 로그인에 성공했습니다!';
    }
  }
}
